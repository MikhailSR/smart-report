"""
–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —Å—Ñ–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª-–æ—Ç—á–µ—Ç, –ø–æ —à–∞–±–ª–æ–Ω—É. –í–Ω—É—Ç—Ä–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–º–º–∞—Ö,
–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥, –æ–±–æ—Ä–æ—Ç–µ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ csv —Ñ–∞–π–ª–∞. CSV —Ñ–∞–π–ª
–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ google sheet, –ø–æ –æ–¥–µ–ª—å–Ω–æ–º—É –º–µ—Å—è—Ü—É.

–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ easygui –¥–ª—è —Å–æ–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ñ–µ–π—Å–∞. –ü—Ä–∏ —Ä–∞—Å—â–∏—Ä–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞,
–æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ Tkinter –∏–ª–∏ PyQt5.
"""

import streamlit as st
import csv
import pprint
import datetime
import os

from typing import TypedDict


class ServiceInfo(TypedDict):
    summa: float
    count: int
    details: list[str]


def format_number_with_spaces(number: int | float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç—ã—Å—è—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–º–µ–Ω—è—Ç —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é, —É–¥–∞–ª—è–µ—Ç –Ω–µ–∑–Ω–∞—á–∏–º—ã–π –Ω–æ–ª—å.
        –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 1200, —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç "1 200".
    Args:
        number (int|float): —á–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
    """

    def delete_nonsignificant_zero(num: float):
        if num % 1 == 0:
            num = int(num)
        return num

    number = delete_nonsignificant_zero(number)

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç–∏
    integer_part, *decimal_part = str(number).split(".")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    formatted_integer_part = f"{int(integer_part):,}".replace(",", " ")

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if decimal_part:
        return f"{formatted_integer_part},{decimal_part[0]}"
    else:
        return formatted_integer_part


def calculation_metrics(services: dict) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫.
    Args:
        services (dict): —Å–ª–æ–≤–∞—Ä—å –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±—â–∏—Ç—ã–≤–∞—é—Ç—Å—è –º–µ—Ç—Ä–∏–∫–∏

    Returns:
        dict[str:float]: –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è - –∏–º–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫. –ó–∞–Ω—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è - —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """

    metrics: dict = {'revenue': 0.0,
                     '–ø–æ—à–ª–∏–Ω–∞_–ø–µ—Ä–µ–≤–æ–¥': 0.0,
                     '–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤': 0.0,
                     '–æ–±–º–µ–Ω_–ø—Ä–∞–≤': 0.0,
                     '—Å–∏—Ç–∞': 0.0,
                     '—Å–ø—Ä–∞–≤–∫–∞': 0.0,
                     '–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_–æ–±–º–µ–Ω–∞_–ø—Ä–∞–≤': 0.0,
                     '–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_—Å_–æ–±–º–µ–Ω–æ–º_–ø—Ä–∞–≤': 0.0}

    revenue: float = round(sum(item['summa'] for item in services.values()), 2)
    metrics['revenue'] = revenue

    poslina_and_perevod: float = round(
        sum(value['summa'] for key, value in services.items() if key in ('–ü–æ—à–ª–∏–Ω–∞', '–ü–µ—Ä–µ–≤–æ–¥')),
        2)
    metrics['–ø–æ—à–ª–∏–Ω–∞_–ø–µ—Ä–µ–≤–æ–¥'] = poslina_and_perevod

    sita: float = services.get('–°–∏—Ç–∞')['summa']
    metrics['—Å–∏—Ç–∞'] = sita

    spravka: float = services.get('–°–ø—Ä–∞–≤–∫–∞')['summa']
    metrics['—Å–ø—Ä–∞–≤–∫–∞'] = spravka

    obmen_prav: float = services.get('–ü–æ–¥ –∫–ª—é—á –ø—Ä–∞–≤–∞ –æ–±–º–µ–Ω')['summa']
    metrics['–æ–±–º–µ–Ω_–ø—Ä–∞–≤'] = obmen_prav

    metrics['–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤'] = revenue - poslina_and_perevod
    metrics[
        '–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_–æ–±–º–µ–Ω–∞_–ø—Ä–∞–≤'] = revenue - poslina_and_perevod - sita - spravka - obmen_prav
    metrics['–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_—Å_–æ–±–º–µ–Ω–æ–º_–ø—Ä–∞–≤'] = revenue - poslina_and_perevod - sita - spravka

    return metrics


def generate_report_file(services: dict, path: str, metrics: dict) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –µ—Å–ª–∏ report-—Ñ–∞–π–ª –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä—ã—Ç.
    –§–∞–π–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞—Ä–∞–Ω–µ–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –§–æ—Ä–º–∞—Ç –º–µ–Ω—è–µ—Ç—Å—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    Args:
        services (dict): —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç—á–µ—Ç-—Ñ–∞–π–ª.
        path (str): –ø—É—Ç—å –∫ .csv —Ñ–∞–π–ª—É, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å services.
        metrics (dict): —Å–ª–æ–≤–∞—Ä—å —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞

    Returns:
        1 (int): –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
    """

    file_name: str = exstract_basename(path)
    file_result_name: str = datetime.datetime.now().strftime(f"report_%Y-%m-%d_%H-%M-%S_{file_name}.txt")
    home_directory: str = os.path.expanduser('~')
    directory_to_write: str = home_directory + r'\Desktop'
    result_file: str = fr"{directory_to_write}\{file_result_name}"

    metrics = metrics.copy()
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É—é —á–∏—Å–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    for key, value in metrics.items():
        metrics[key] = format_number_with_spaces(value)

    with open(result_file, 'w', encoding='utf8') as file:
        file.write(f'–†–∞—Å—á–µ—Ç\n–û–±–æ—Ä–æ—Ç: {metrics["revenue"]} –µ–≤—Ä–æ\n\n')
        file.write(f'üß°–ë–µ–∑ –ø–æ—à–ª–∏–Ω –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {metrics["–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤"]} –µ–≤—Ä–æ\n\n')
        file.write(
            f'ü©µ–ë–µ–∑ –ø–æ—à–ª–∏–Ω, –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å–∏—Ç, —Å–ø—Ä–∞–≤–æ–∫ –∏ –æ–±–º–µ–Ω–∞ –ø—Ä–∞–≤: {metrics["–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_–æ–±–º–µ–Ω–∞_–ø—Ä–∞–≤"]} –µ–≤—Ä–æ\n\n')
        file.write(
            f'üíö–ë–µ–∑ –ø–æ—à–ª–∏–Ω, –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å–∏—Ç, —Å–ø—Ä–∞–≤–æ–∫, —Å –æ–±–º–µ–Ω–æ–º –ø—Ä–∞–≤: {metrics["–±–µ–∑_–ø–æ—à–ª–∏–Ω_–ø–µ—Ä–µ–≤–æ–¥–æ–≤_—Å–∏—Ç_—Å–ø—Ä–∞–≤–æ–∫_—Å_–æ–±–º–µ–Ω–æ–º_–ø—Ä–∞–≤"]} –µ–≤—Ä–æ\n\n')

        for service, value in services.items():
            number_sales_service: int = value['count']
            if number_sales_service == 0:
                continue
            sums: str = ' + '.join(value['details'])
            total_sum = format_number_with_spaces(value["summa"])
            file.write(f'{service}\n{value["count"]} —à—Ç: {sums}\nüí∞–°—É–º–º–∞ {total_sum} –µ–≤—Ä–æ\n\n')

    return 1


def process_service_data(path_file: str) -> dict[str, ServiceInfo]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —É—Å–ª—É–≥. –ó–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Å—É–º–º–∞_–æ–±—â–∞—è: float, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:int,
    —Å—É–º–º—ã_–æ—Ç–¥–µ–ª—å–Ω–æ: list[str]).

    Args:
        path_file (str): –ø—É—Ç—å –∫ .cvs —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º–º —Ñ–æ—Ä–º–µ—Ç–µ –î–∞—Ç–∞, –°—É–º–º–∞, –£—Å–ª—É–≥–∞ –∏ —Ç.–¥.

    Returns:
        dict: –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ —É—Å–ª—É–≥–∞: [—Å—É–º–º–∞_–æ–±—â–∞—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—É–º–º—ã_–æ—Ç–¥–µ–ª—å–Ω–æ].
    """

    services: dict[str, ServiceInfo] = {
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': {'summa': 0, 'count': 0, 'details': []},
        '–ë–∞–∫–∞–ª–∞–≤—Ä': {'summa': 0, 'count': 0, 'details': []},
        '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞': {'summa': 0, 'count': 0, 'details': []},
        'NIE': {'summa': 0, 'count': 0, 'details': []},
        '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': {'summa': 0, 'count': 0, 'details': []},
        '–§–û–ü/–∞–≤—Ç–æ–Ω–æ–º–æ': {'summa': 0, 'count': 0, 'details': []},
        '–®–∫–æ–ª–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ': {'summa': 0, 'count': 0, 'details': []},
        '–û–º–æ–ª–æ–≥–∞—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞': {'summa': 0, 'count': 0, 'details': []},
        '–û–º–æ–ª–æ–≥–∞—Ü–∏—è –¥–∏–ø–ª–æ–º–∞': {'summa': 0, 'count': 0, 'details': []},
        '–í–ó1': {'summa': 0, 'count': 0, 'details': []},
        '–ü–æ–¥ –∫–ª—é—á –ø—Ä–∞–≤–∞ –æ–±–º–µ–Ω': {'summa': 0, 'count': 0, 'details': []},
        '–°–∏—Ç–∞': {'summa': 0, 'count': 0, 'details': []},
        '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ç—É–¥ –≤–∏–∑—ã': {'summa': 0, 'count': 0, 'details': []},
        '–Ø–∑—ã–∫–æ–≤–∞—è —à–∫–æ–ª–∞': {'summa': 0, 'count': 0, 'details': []},
        '–ü–æ—à–ª–∏–Ω–∞': {'summa': 0, 'count': 0, 'details': []},
        '–ü–µ—Ä–µ–≤–æ–¥': {'summa': 0, 'count': 0, 'details': []},
        '–°–ø—Ä–∞–≤–∫–∞': {'summa': 0, 'count': 0, 'details': []},
        '–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞': {'summa': 0, 'count': 0, 'details': []},
        '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è': {'summa': 0, 'count': 0, 'details': []},
        '–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ—á–µ–≤–Ω–∏–∫': {'summa': 0, 'count': 0, 'details': []}
    }

    with open(path_file, encoding='utf-8') as file:
        reader = csv.reader(file)
        head = next(reader)

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
        for row in reader:
            service: str = row[7]
            if service == '' or service.isdigit():
                continue

            summa: str = normalize_number(row[1])
            got_service = services.get(service, -1)
            if got_service == -1:
                services[service] = {'summa': 0, 'count': 0, 'details': []}
                got_service = services.get(service)

            got_service['summa'] += float(summa)
            got_service['count'] += 1
            got_service['details'].append(summa)

    return services


def exstract_basename(path: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–∑ –ø—É—Ç–∏ –∫ –Ω–µ–º—É.

    Args:
        path (str): –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.

    Returns:
        str: –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """

    return os.path.basename(path)


def normalize_number(number: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É. –ó–∞–ø—è—Ç–∞—è –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–∫—É,
    –ø—Ä–æ–±–µ–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è, —É–¥–∞–ª–µ–Ω—ã –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (\xa0).

    Args:
        number (str): —á–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ"""

    number = number.replace("\xa0", "")
    number = number.replace(" ", "")
    number = number.replace(',', '.')
    return number


def is_csv_file(path: str) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv –∏ False –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä path
    –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    Args:
        path (str): –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–Ω–µ—á–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞.

    Returns:
        bool: True - –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø. False - –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø.
    """
    if not path:
        return False

    filename, file_extension = os.path.splitext(path)
    if file_extension == '.csv':
        return True
    return False


def select_file():
    file_path = filedialog.askopenfilename()

    if file_path:
        while not is_csv_file(file_path) and file_path != '':
            messagebox.showwarning(title='–û—à–∏–±–∫–∞!',
                                   message='–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª! –° —Ç–∏–ø–æ–º –ù–ï .csv\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            file_path = filedialog.askopenfilename()

        if file_path:
            messagebox.showinfo("–§–∞–π–ª –≤—ã–±—Ä–∞–Ω", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–π–ª: {file_path}")
            root.destroy()

    global path
    path = file_path


def main():
    st.title("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü")

    st.write("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –Ω–∞ Streamlit, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –æ–±–ª–∞–∫–µ.")
    st.sidebar.title("About")
    uploaded_file = st.file_uploader('–í—ã–±–µ—Ä–∏—Ç–µ .csv —Ñ–∞–π–ª.\n–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Google Sheet.',
                                     type=('.csv'))

    def t():
        st.text_area('Button')
    st.button('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', on_click=t)
    exit()

    services: dict = process_service_data(uploaded_file)
    if generate_report_file(services, uploaded_file, calculation_metrics(services)):
        messagebox.showinfo(message='–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤, –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!')

    pprint.pprint(services)


if __name__ == '__main__':
    main()
